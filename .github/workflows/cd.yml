name: CD

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      - name: Run Jest tests with coverage
        env:
          PGUSER: postgres
          PGPASSWORD: myStrongPassword
          PGDATABASE: test_db
          PGHOST: localhost
          PGPORT: 5432
        run: npm test -- --runInBand --coverage
        working-directory: ./backend

      - name: Update README with coverage badge
        run: |
          sed -i "s/coverage-[0-9.]*%25/coverage-$(grep -oP '<span class=\"strong\">\K[0-9.]+(?=%)' ./backend/coverage/lcov-report/index.html | head -n 1)%25/g" README.md
        working-directory: ./

      - name: Check if README.md has changes
        id: readme_changed
        run: |
          if [[ $(git status --porcelain README.md) ]]; then
            echo "README.md modified"
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "No changes to README.md"
            echo "changes=false" >> $GITHUB_ENV
          fi

      - name: Commit and push README with updated badge if changed
        if: env.changes == 'true' && github.event_name != 'pull_request'
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add README.md
          git commit -m "docs(automated): Update coverage badge"
          git push git@github.com:julian-m-willis/spm-proj.git HEAD:${GITHUB_REF#refs/heads/}

  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}  # Only run on main branch after CI succeeds
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1  # Optimize checkout by only fetching the latest commit

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: julianwillis
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push the Frontend image
      - name: Build Frontend Docker image
        run: |
          docker build -t julianwillis/spm-frontend:latest ./frontend/.
          docker push julianwillis/spm-frontend:latest

      # Step 5: Build and push the Backend image
      - name: Build Backend Docker image
        run: |
          docker build -t julianwillis/spm-backend:latest ./backend/.
          docker push julianwillis/spm-backend:latest

      # Step 6: SSH into Frontend EC2 and Pull the Latest Frontend Image
      - name: Deploy Frontend to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FRONTEND_EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull julianwillis/spm-frontend:latest
            docker rm -f spm-frontend || true
            docker run -d --name spm-frontend -p 80:80 julianwillis/spm-frontend:latest

      # Step 7: SSH into Backend EC2 and Pull the Latest Backend Image
      - name: Deploy Backend to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull julianwillis/spm-backend:latest
            docker rm -f spm-backend || true
            docker run -d --name spm-backend --network host --env-file .env julianwillis/spm-backend:latest